# -*- coding: utf8 -*-

import telebot
from telebot import types
import copy
import math
import json
from threading import Timer
import os

token = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(token)

companies = {1: {'Standard Oil': 0, 'White Star Line': 0, 'Charron': 0, '–ü—É—Ç–∏–ª–æ–≤—Å–∫–∏–µ –∑–∞–≤–æ–¥—ã': 0, 'Gr√∂nvik glasbruk': 0},
             2: {'–¢—É–ª—å—Å–∫–∏–π –æ—Ä—É–∂–µ–π–Ω—ã–π –∑–∞–≤–æ–¥': 0, 'US steel': 0, 'Victor Talking Machine Company': 0, 'Darmst√§dter-National bank': 0, 'Benz and Cie': 0, '–ü–∏–≤–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è Alexander Keith‚Äôs': 0},
             3: {'RKO pictures': 0, 'Procter and Gamble': 0, 'Parker Brothers': 0, 'Waggonfabriek L. Steinfurt': 0, 'Bally –ü–∏–Ω–±–æ–ª—å–Ω—ã–µ —Å—Ç–æ–ª—ã': 0},
             4: {'BMW': 0, 'Sumitomo': 0, 'IBM': 0, 'Cuban Telephone Company': 0, 'Grundig': 0},
             5: {'Panther': 0, 'Chrysler': 0, 'Consett Iron Company': 0, 'Peabody Energy': 0, 'Esso': 0},
             6: {'Federal Express': 0, 'Singer': 0, 'Ultimate': 0, 'Starbucks': 0, 'Firma Gebr√ºder Grill': 0},
             7: {'Lego': 0, 'Kodak': 0, 'Apple': 0, 'Polaroid': 0, 'Global Crossing': 0, 'Nintendo': 0}}

multipliers = {1: {'Standard Oil': 4, 'White Star Line': 0, 'Charron': 5, '–ü—É—Ç–∏–ª–æ–≤—Å–∫–∏–µ –∑–∞–≤–æ–¥—ã': 2, 'Gr√∂nvik glasbruk': 0},
             2: {'–¢—É–ª—å—Å–∫–∏–π –æ—Ä—É–∂–µ–π–Ω—ã–π –∑–∞–≤–æ–¥': 0, 'US steel': 1/3, 'Victor Talking Machine Company': 5, 'Darmst√§dter-National bank': 0, 'Benz and Cie': 1, '–ü–∏–≤–æ–≤–∞—Ä–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è Alexander Keith‚Äôs': 4},
             3: {'RKO pictures': 5, 'Procter and Gamble': 8, 'Parker Brothers': 3, 'Waggonfabriek L. Steinfurt': 0, 'Bally –ü–∏–Ω–±–æ–ª—å–Ω—ã–µ —Å—Ç–æ–ª—ã': 0},
             4: {'BMW': 4, 'Sumitomo': 10, 'IBM': 8, 'Cuban Telephone Company': 0, 'Grundig': 5},
             5: {'Panther': 3, 'Chrysler': 0.1, 'Consett Iron Company': 0.1, 'Peabody Energy': 2, 'Esso': 3},
             6: {'Federal Express': 15, 'Singer': 0.2, 'Ultimate': 10, 'Starbucks': 2, 'Firma Gebr√ºder Grill': 0},
             7: {'Lego': 0.1, 'Kodak': 0, 'Apple': 2, 'Polaroid': 0, 'Global Crossing': 0, 'Nintendo': 1}}

finish = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0}

years = {1: "1900 ‚Äî 1915", 2: "1915 ‚Äî 1932", 3: "1932 ‚Äî 1945", 4: "1945 ‚Äî 1960", 5: "1960 ‚Äî 1975", 6: "1975 ‚Äî 1990", 7: "1990 ‚Äî 2005"}

debt = {1: 6, 2: 11, 3: 36, 4: 195, 5: 321, 6: 1746, 7: 0}

# –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–≥—Ä—É
with open('save_players.json') as f:
    try:
        players = json.load(f)
        players_2 = copy.deepcopy(players)
        players = {}
        for player in players_2:
            player_2 = int(player)
            players[player_2] = copy.deepcopy(players_2[player])
            companies_2 = copy.deepcopy(players[player_2]["companies"])
            players[player_2]["companies"] = {}
            for round_n in companies_2:
                round_2 = int(round_n)
                players[player_2]["companies"][round_2] = copy.deepcopy(companies_2[round_n])
            finish_2 = copy.deepcopy(players[player_2]["finish"])
            players[player_2]["finish"] = {}
            for round_num in finish_2:
                round_3 = int(round_num)
                players[player_2]["finish"][round_3] = copy.deepcopy(finish_2[round_num])
    except:
        players = {}

print(players)


sticker = 'CAACAgIAAxkBAAIPnV67u5l7uBx-N1IYtu70VgclQuO4AAIVAwACnNbnCgbnCWarj1O-GQQ'
sticker_2 = 'CAACAgIAAxkBAAIP3167xcJI92k-JiH6O1tBSEvKzSUEAAISAwACnNbnChxSQ7QkdV0oGQQ'
sticker_3 = 'CAACAgIAAxkBAAIiGV6_wT-LBUzOSIcwmBNHdCFuUNp2AAIXAwACnNbnCtb0SKu1OIHZGQQ'

putin = 'https://i.ytimg.com/vi/hhuusyppgx4/hqdefault.jpg'

yesfraselist = [
    "–≠—Ç–æ –±—ã–ª–∏ –Ω–µ–ø—Ä–æ—Å—Ç—ã–µ –≥–æ–¥—ã. –î–∞–≤–Ω–æ —Å–∫–æ–ø–∏–ª–∏—Å—å –æ–±–∏–¥—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞, –∏ –∫ –Ω–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–∏–±–∞–≤–ª—è–ª–∏—Å—å –Ω–æ–≤—ã–µ. –ù–∞–∑—Ä–µ–≤–∞–≤—à–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±–µ—Ä–Ω—É–ª—Å—è –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–Ω–æ–π –≤–æ–π–Ω–æ–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ —Å–∞–º–æ–º —Ä–∞–∑–≥–∞—Ä–µ. –ù–æ –¥–µ–Ω—å–≥–∏ –∏ —ç–º–æ—Ü–∏–∏ ‚Äî –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—â–∏, –º—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –¥–∞–∂–µ –∏–∑ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –≤—ã —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å –≤—ã–≥–æ–¥—É.",
    "–≠—Ç–æ –±—ã–ª–∏ –Ω–µ–ø—Ä–æ—Å—Ç—ã–µ –≥–æ–¥—ã. –¢–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∫—Ä—É–ø–Ω–µ–π—à–∞—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞ –≤–æ–π–Ω–∞, –∏ –ø–æ –º–∏—Ä—É –ø—Ä–æ–∫–∞—Ç–∏–ª–∞—Å—å –≤–æ–ª–Ω–∞ —Ä–µ–≤–æ–ª—é—Ü–∏–π, –∫–∞–∫ —Ä–∞–∑–≥–æ—Ä–µ–ª—Å—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å. –ù–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –∞–∫—É–ª–∞ —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–¥–∞ –ø–æ—Ç—Ä—è—Å–µ–Ω–∏—è–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ –Ω–∏—Ö –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å. ",
    "–≠—Ç–æ –±—ã–ª–∏ –Ω–µ–ø—Ä–æ—Å—Ç—ã–µ –≥–æ–¥—ã. –í—ã –¥—É–º–∞–ª–∏, —á—Ç–æ —Ö—É–∂–µ –ü–µ—Ä–≤–æ–π –ú–∏—Ä–æ–≤–æ–π –Ω–µ–∫—É–¥–∞? –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –µ—Å—Ç—å. –í–æ–π–Ω–∞ - —ç—Ç–æ –∞–¥... –µ—Å–ª–∏ —Ç—ã –Ω–µ –¥–æ–≥–∞–¥–∞–ª—Å—è –Ω–µ –≤–≤—è–∑—ã–≤–∞—Ç—å—Å—è –≤ –Ω–µ–µ. –ì–æ—Ä–∞–∑–¥–æ –ø—Ä–∏—è—Ç–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥—Ä–∞–∫—É —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã, –∞ –µ—â–µ –ø—Ä–∏—è—Ç–Ω–µ–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥—Ä–∞—á—É–Ω–∞–º –±–µ–π—Å–±–æ–ª—å–Ω—ã–µ –±–∏—Ç—ã.",
    "–≠—Ç–æ –±—ã–ª–∏ –Ω–µ–ø—Ä–æ—Å—Ç—ã–µ –≥–æ–¥—ã. –¢–æ–ª—å–∫–æ-—Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –≤–æ–π–Ω–∞. –¶–µ–ª—ã–π –º–∞—Ç–µ—Ä–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è –≤ —Ä—É–∏–Ω–∞—Ö. –ù–æ –∂–∏–∑–Ω—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. –ù–∞–∫–æ–Ω–µ—Ü –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥ –º–æ–∂–µ—Ç —É—Å—Ç—É–ø–∏—Ç—å –º–µ—Å—Ç–æ –≤–¥—É–º—á–∏–≤–æ–º—É –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.",
    "–≠—Ç–æ –±—ã–ª–∏ –Ω–µ–ø—Ä–æ—Å—Ç—ã–µ –≥–æ–¥—ã. –ö–∞–∑–∞–ª–æ—Å—å –±—ã, –∂–∏–≤–∏—Ç–µ —Å–µ–±–µ —Å–ø–æ–∫–æ–π–Ω–æ, –≤—Å–µ –∂–µ –ø–æ–Ω—è–ª–∏, –∫–∞–∫–∏–º —É–∂–∞—Å–æ–º –º–æ–∂–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å—Å—è –≤–æ–π–Ω–∞. –ù–æ –±–∏—Ç–≤—ã –±—ã–≤–∞—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–ª—è—Ö —Å—Ä–∞–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏ –≤ —Ä—É–∫–∞—Ö, –Ω–æ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ, –∑–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ —ç—Ç–æ–≥–æ –º–∏—Ä–∞. –ò –µ—Å–ª–∏ —Ç—ã —Å–∫–æ–ø–∏–ª –±–æ–≥–∞—Ç—Å—Ç–≤–∞ –∏ –ø–æ–ª—É—á–∏–ª –≤–ª–∞—Å—Ç—å, –≥–æ—Ç–æ–≤—å—Å—è –∏—Ö –∑–∞—â–∏—â–∞—Ç—å.",
    "–≠—Ç–æ –±—ã–ª–∏ –Ω–µ–ø—Ä–æ—Å—Ç—ã–µ –≥–æ–¥—ã. –ù–æ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –¥–µ—Ä–∂–∞–ª–æ—Å—å –º–æ–ª–æ–¥—Ü–æ–º. –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–æ—Å–∏–ª–∏ –±–æ–ª—å—à–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ú–∏—Ä —Å—Ç–∞–ª —á—É—Ç—å –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º, –∞ —ç—Ç–æ –ª—É—á—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, –∫–æ–≥–¥–∞ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ –∏ –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏.",
    "–≠—Ç–æ –±—ã–ª–∏ –Ω–µ–ø—Ä–æ—Å—Ç—ã–µ –≥–æ–¥—ã. –°–∫–æ—Ä–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è, –∑–∞ –∫–∞–∫–∏–µ-—Ç–æ 15 –ª–µ—Ç –º–∏—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è –¥–æ –Ω–µ—É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç–∏. –¶–µ–ª—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—è–≤–ª—è—é—Ç—Å—è –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞ –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≥–æ–¥—ã –∏ —Ç–∞–∫–∂–µ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç–≤–æ—Ä—è—é—Ç—Å—è. –î–∞ —á—Ç–æ —Ç–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É—Ç—Ä–æ–º –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ. –ù–æ –º–∞—Å—Ç–µ—Ä —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–¥ —Ç–∞–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏."]


stop_game_flag = 0

#–ø–∏—à–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ "–¥–æ–ª–ª–∞—Ä"
def dollar_word(dollar_sum):
    if isinstance(dollar_sum, float):
        return "–¥–æ–ª–ª–∞—Ä–∞"
    elif 11 <= int(str(dollar_sum).split()[0][-2:]) <= 14:
        return "–¥–æ–ª–ª–∞—Ä–æ–≤"
    elif 1 < int(str(dollar_sum).split()[0][-1]) <= 4:
        return "–¥–æ–ª–ª–∞—Ä–∞"
    elif int(str(dollar_sum).split()[0][-1]) == 1:
        return "–¥–æ–ª–ª–∞—Ä"
    else:
        return "–¥–æ–ª–ª–∞—Ä–æ–≤"

#–æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def small_talk(message):
    if ("–ø—Ä–∏–≤–µ—Ç" in message.text.lower()) or ("hi" in message.text.lower()) or ("hello" in message.text.lower()) or ("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in message.text.lower()) or ("—Ö–∞–π" in message.text.lower()):
        bot.send_message(message.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –ø–æ–∂–∏–≤–∞–µ—Ç–µ?")
    elif ("—Ö–æ—Ä–æ—à–æ" in message.text.lower()) or ("–æ—Ç–ª–∏—á–Ω–æ" in message.text.lower()) or ("–ª—É—á—à–µ –≤—Å–µ—Ö" in message.text.lower()) or ("–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ" in message.text.lower()):
        if ("—Ç—ã" in message.text.lower() and "–º–∏–ª—ã–π" not in message.text.lower()) or ("—Ç–µ–±—è" in message.text.lower()) or ("—Ç–≤–æ–∏" in message.text.lower()) or ("–≤–∞—à–∏" in message.text.lower()) or ("–≤–∞—Å" in message.text.lower()) or ("–≤—ã" in message.text.lower()):
            bot.send_message(message.from_user.id, "–ò —É –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ) –ñ–µ–ª–∞—é —É–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!\nP.S. –Ø –±–æ–ª–µ—é –∏–º–µ–Ω–Ω–æ –∑–∞ –≤–∞—Å üòâ, —Ç–æ–ª—å–∫–æ –Ω–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ)")
        else:
            bot.send_message(message.from_user.id, "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ –∑–∞ –≤–∞—Å! –ñ–µ–ª–∞—é —É–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!\nP.S. –Ø –±–æ–ª–µ—é –∏–º–µ–Ω–Ω–æ –∑–∞ –≤–∞—Å üòâ, —Ç–æ–ª—å–∫–æ –Ω–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ)")
    elif ("–Ω–µ –æ—á–µ–Ω—å" in message.text.lower()) or ("–ø–ª–æ—Ö–æ" in message.text.lower()) or ("—Ç–∞–∫ —Å–µ–±–µ" in message.text.lower()) or ("–≥—Ä—É—Å—Ç–Ω–æ" in message.text.lower()) or ("—Å–∫—É—á–Ω–æ" in message.text.lower()) or ("—Å–æ–π–¥–µ—Ç" in message.text.lower()) or ("–±–æ–º–∂" in message.text.lower()) or ("–ø—Ä–æ–∏–≥—Ä–∞–ª" in message.text.lower()) or ("–ø—Ä–æ–µ–±–∞–ª" in message.text.lower()) or ("–ø—Ä–æ—Å—Ä–∞–ª" in message.text.lower()):
        if ("—Ç—ã" in message.text.lower()) or ("—Ç–µ–±—è" in message.text.lower()) or ("—Ç–≤–æ–∏" in message.text.lower()) or ("–≤–∞—à–∏" in message.text.lower()) or ("–≤–∞—Å" in message.text.lower()) or ("–≤—ã" in message.text.lower()):
            bot.send_message(message.from_user.id, "–£ –º–µ–Ω—è —Ö–æ—Ä–æ—à–æ, –∏ —É –≤–∞—Å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∞–¥–∏—Ç—Å—è! –ñ–µ–ª–∞—é —É–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!\nP.S. –Ø –±–æ–ª–µ—é –∏–º–µ–Ω–Ω–æ –∑–∞ –≤–∞—Å üòâ, —Ç–æ–ª—å–∫–æ –Ω–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ)")
        else:
            bot.send_message(message.from_user.id, "–Ø —É–≤–µ—Ä–µ–Ω, –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∞–¥–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –ø–æ–±–µ–¥–∏—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ) –ñ–µ–ª–∞—é —É–¥–∞—á–∏!\nP.S. –Ø –±–æ–ª–µ—é –∏–º–µ–Ω–Ω–æ –∑–∞ –≤–∞—Å üòâ, —Ç–æ–ª—å–∫–æ –Ω–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ)")
    elif ("—Å–ø–∞—Å–∏–±–æ" in message.text.lower()) or ("–ø—Ä–∏—è—Ç–Ω–æ" in message.text.lower()) or ("–º–∏–ª–æ" in message.text.lower()) or ("–º–∏–ª—ã–π" in message.text.lower()) or ("–∫–ª–∞—Å—Å–Ω—ã–π" in message.text.lower()):
        bot.send_sticker(chat_id=message.from_user.id, data=sticker_2)
    elif ("—Ç–µ–±—è" in message.text.lower()) or ("—Ç–≤–æ–∏" in message.text.lower()) or ("–≤–∞—à–∏" in message.text.lower()) or ("–≤–∞—Å" in message.text.lower()) or ("–≤—ã" in message.text.lower()) or ("–∫–∞–∫ —Å–∞–º" in message.text.lower()) or ("—á–µ –∫–∞–∫" in message.text.lower()) or ("–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ" in message.text.lower()) or ("–¥–µ–ª–∞" in message.text.lower()):
        bot.send_message(message.from_user.id, "–£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç–æ–ª—å–∫–æ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç üòî")
    else:
        bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        bot.send_message(325051402, f"**{message.text}**")


#–∫—Ä–∞—Å–∏–≤–∞—è –≤—ã–¥–∞—á–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –≤ –Ω–∞—á–∞–ª–µ
def beautiful(id):
    return f"–†–∞—É–Ω–¥ {players[id]['round_number']}/7: {years[players[id]['round_number']]} –≥–æ–¥—ã."


#—Å–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ —Ä–∞—É–Ω–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–∞—É–Ω–¥–∞
def round_list(id):
    roundlist = []
    for company in players[id]["companies"][players[id]["round_number"]]:
        roundlist.append(company)
    return roundlist


#—Å—á–∏—Ç–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞
def money_result(id):
    investment_list = []
    for i in players[id]["companies"][players[id]["round_number"]].values():
        investment_list.append(i)
    multipliers_list = []
    for i in multipliers[players[id]["round_number"]].values():
        multipliers_list.append(i)
    almost_result = [x * y for x, y in zip(investment_list, multipliers_list)]
    round_result = sum([int(x) for x in almost_result])
    return round_result


#–∫–æ–º–ø–∞–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é
def max_profitable_company(id):
    investment_list = []
    result_list = []
    max_profit_companies = []
    for round in players[id]["companies"]:
        for company in players[id]["companies"][round]:
            if players[id]["companies"][round][company] > 0:
                investment_list.append(company)
    for round in multipliers:
        for company in multipliers[round]:
            if (company in investment_list):
                result_list.append(multipliers[round][company])
    max_result = max(result_list)
    for round in multipliers:
        for company in multipliers[round]:
            if multipliers[round][company] == max_result:
                max_profit_companies.append(company)
    if len(max_profit_companies) == 1:
        return f"–í–∞—à–µ —Å–∞–º–æ–µ —É—Å–ø–µ—à–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ - {max_profit_companies[0]}, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {(max_result - 1) * 100}%"
    elif len(max_profit_companies) > 1:
        return f"–í–∞—à–∏ —Å–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è - {', '.join(max_profit_companies)}, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {(max_result - 1) * 100}%"


#–∫–æ–º–ø–∞–Ω–∏—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –≤—ã–∏–≥—Ä—ã—à–µ–º –≤ –¥–µ–Ω—å–≥–∞—Ö
def max_profit_from_company(id):
    players[id]["companies_result"] = copy.deepcopy(multipliers)
    all_results_list = []
    max_profit_companies = []
    max_lose_companies = []
    for round in multipliers:
        for company in multipliers[round]:
            players[id]["companies_result"][round][company] = players[id]["companies"][round][company] * (multipliers[round][company] -1)
    for round in players[id]["companies_result"]:
        for company in players[id]["companies_result"][round]:
            all_results_list.append(players[id]["companies_result"][round][company])
    max_result = max(all_results_list)
    for round in players[id]["companies_result"]:
        for company in players[id]["companies_result"][round]:
            if players[id]["companies_result"][round][company] == max_result:
                max_profit_companies.append(company)
    if len(max_profit_companies) == 1:
        max_profit =  f"–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ {max_profit_companies[0]}, –ø—Ä–∏–±—ã–ª—å –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {max_result} {dollar_word(max_result)}"
    else:  #len(max_profit_companies) > 1
        max_profit = f"–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è—Ö - {', '.join(max_profit_companies)}, –ø—Ä–∏–±—ã–ª—å –æ—Ç –∫–∞–∂–¥–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Ä–∞–≤–Ω—è–ª–∞—Å—å {max_result} {dollar_word(max_result)}"
    min_result = min(all_results_list)
    for round in players[id]["companies_result"]:
        for company in players[id]["companies_result"][round]:
            if players[id]["companies_result"][round][company] == min_result:
                max_lose_companies.append(company)
    if len(max_lose_companies) == 1:
        max_lose = f"–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ {max_lose_companies[0]}, —É–±—ã—Ç–æ–∫ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–∏–ª {math.ceil(-min_result)} {dollar_word(math.ceil(-min_result))}"
    else: #len(max_lose_companies) > 1
        max_lose = f"–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è—Ö - {', '.join(max_lose_companies)}, —É–±—ã—Ç–æ–∫ –æ—Ç –∫–∞–∂–¥–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Ä–∞–≤–Ω—è–ª—Å—è {math.ceil(-min_result)} {dollar_word(math.ceil(-min_result))}"
    if min_result >= 0:
        return max_profit
    else:
        a = '\n'.join([max_profit, max_lose])
        return a


#–∫–ª–∞–≤–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π
def keyboard(x, id):
    keyboard = types.InlineKeyboardMarkup()
    for company in x(id):   #x = round_list
        keyboard.add(types.InlineKeyboardButton(text=company,callback_data=company))
    return keyboard


#–∫–ª–∞–≤–∞ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥?
def keyboard_begin_round():
    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text="–ù–∞—á–Ω–µ–º", callback_data='begin')
    keyboard.add(yes)
    return keyboard


#–∫–ª–∞–≤–∞ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?
def keyboard_leave():
    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text="–î–∞", callback_data='sure')
    no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notsure")
    keyboard.add(yes, no)
    return keyboard


#–∫–ª–∞–≤–∞ –ì–∞–≤—Ä, –ø–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
def keyboard_result():
    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton(text="–°–º–æ—Ç—Ä–∏–º", callback_data='yes')
    keyboard.add(yes)
    return keyboard


#—Ç–∞–±–ª–∏—á–∫–∞, –∫—Ç–æ –∫—É–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª
def investment_table():
    invest = {}
    local_round_list = []
    result = []
    for player in players:
        round_number = players[player]["round_number"]
        break
    for company in players[player]["companies"][round_number]:
        invest[company] = []
        local_round_list.append(company)
    for company in local_round_list:
        for player in players:
            if players[player]["companies"][round_number][company] > 0:
               invest[company].append(players[player]["name"])
    for company in invest:
        invest[company] = ", ".join(invest[company])
        result.append(": ".join([company, invest[company]]))
        final = "\n".join(result)
    return final


#—Ç–∞–±–ª–∏—á–∫–∞ —Å —É–∂–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
def already_invested(id):
    invest_list = sorted([players[id]["companies"][players[id]["round_number"]][company] for company in players[id]["companies"][players[id]["round_number"]] if players[id]["companies"][players[id]["round_number"]][company] > 0], reverse=True)
    company_list = []
    for result in invest_list:
        for company in players[id]["companies"][players[id]["round_number"]]:
            if players[id]["companies"][players[id]["round_number"]][company] == result:
                company_list.append(company)
    company_list_2 = company_list[::-1]
    for i in range(0, len(company_list_2)):
        if company_list_2[i] in company_list_2[i + 1:]:
            company_list.remove(company_list_2[i])
    table_list = []
    for i in range (0, len(company_list)):
        a = "".join(str(company_list[i]) +" ‚Äî "+ str(invest_list[i]) + " " + str(dollar_word(invest_list[i])))
        table_list.append(a)
    table_str = "\n".join(table_list)
    return table_str


#—Ç–∞–±–ª–∏—á–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—É–Ω–¥–∞
def round_table():
    for player in players:   #–ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—ë –ª–∏ –∏–≥—Ä–æ–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª, –µ—Å–ª–∏ –Ω–µ—Ç, –±–∞–±–ª–æ —Å–≥–æ—Ä–∞–µ—Ç
        round_investment = sum([i for i in players[player]["companies"][players[player]["round_number"]].values()])
        if players[player]["money"] != round_investment:
            players[player]["round_result"] = money_result(player)
    result_money_list = sorted(list(set([players[i]["round_result"] - players[i]["debt"] for i in players])), reverse=True)
    names_list = []
    money_list = []
    debt_list = []
    for result in result_money_list:
        for player in players:
            if players[player]["round_result"] - players[player]["debt"] == result:
                names_list.append(str(players[player]["name"]))
                money_list.append(players[player]["round_result"])
                debt_list.append(players[player]["debt"])
    table_list = []
    winners_list = []
    if players[[player for player in players][0]]["round_number"] == 7:
        for i in range(0, len(names_list)):
            row = "".join(str(names_list[i]) + " ‚Äî " + str(money_list[i]-debt_list[i]) + " " + str(dollar_word(money_list[i]-debt_list[i])))
            table_list.append(row)
            if (money_list[i]-debt_list[i]) == max(result_money_list):
                row = "".join(str(names_list[i]))
                winners_list.append(row)
        if len(winners_list) > 1:
            winners = ", ".join(winners_list)
            congratulation = "".join(["–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ", winners, " !"])
        else:
            winner = winners_list[0]
            congratulation = "".join(['–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è - –ö–æ–º–∞–Ω–¥—É "', winner, '"!'])
        table_str = "\n".join(table_list)
        return table_str, congratulation
    else:
        for i in range (0, len(names_list)):
            if debt_list[i] > 0:
                a = "".join(str(names_list[i]) + " ‚Äî " + str(money_list[i]) + " " + str(dollar_word(money_list[i])) + ", " + "–¥–æ–ª–≥ ‚Äî " + str(debt_list[i]) + " " + str(dollar_word(debt_list[i])))
                table_list.append(a)
            else:
                a = "".join(str(names_list[i]) + " ‚Äî " + str(money_list[i]) + " " + str(dollar_word(money_list[i])))
                table_list.append(a)
        table_str = "\n".join(table_list)
    return table_str


#–∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –¥–µ–Ω–µ–≥
def delta(money):
    delta_abs = round((money - 3) / 105, 2)
    if money >= 0:
        delta_otn = round(((money / 3) ** (1 / 105) - 1) * 100 , 2)
        return f"–ö–∞–∂–¥—ã–π –≥–æ–¥ –æ–Ω –≤ —Å—Ä–µ–¥–Ω–µ–º —Ä–æ—Å –Ω–∞ {delta_otn}% –∏ –ø—Ä–∏–±–∞–≤–ª—è–ª {delta_abs} {dollar_word(delta_abs)}! –≠—Ç–æ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏ –≤—ã –ø–æ –ø—Ä–∞–≤—É –º–æ–∂–µ—Ç–µ –∏–º –≥–æ—Ä–¥–∏—Ç—å—Å—è!"
    else:
        return f"–ö–∞–∂–¥—ã–π –≥–æ–¥ –≤ —Å—Ä–µ–¥–Ω–µ–º –≤—ã —Ç–µ—Ä—è–ª–∏ {-delta_abs} {dollar_word(-delta_abs)}! –≠—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–π –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —Å–±–µ—Ä–µ—á—å –¥–µ–Ω—å–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏!"


#—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞ —É –∏–≥—Ä–æ–∫–∞
def lose_money(player):
    creditor_list = ['–≤–∞—à –±–æ–≥–∞—Ç—ã–π –¥—è–¥—é—à–∫–∞ –æ–¥–æ–ª–∂–∏–ª –≤–∞–º', '–≤–∞—à–∞ –ª—é–±–∏–º–∞—è –±–∞–±—É–ª–µ–Ω—å–∫–∞ –æ–¥–æ–ª–∂–∏–ª–∞ –≤–∞–º', '—Å—ã–Ω –º–∞–º–∏–Ω–æ–π –ø–æ–¥—Ä—É–≥–∏ –æ–¥–æ–ª–∂–∏–ª –≤–∞–º', '–ë–∞–Ω–∫ "–î–µ–Ω—å–≥–∏ –ø–æ–¥ –∑–∞–ª–æ–≥ –ø–æ—á–∫–∏" –¥–∞–ª –≤–∞–º –≤ –∫—Ä–µ–¥–∏—Ç', '–≤–∞—à –±–æ–≥–∞—Ç—ã–π –¥—è–¥—é—à–∫–∞', '–º–µ—Å—Ç–Ω—ã–π –±–∞–Ω–¥–∏—Ç –æ–¥–æ–ª–∂–∏–ª –≤–∞–º']
    return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ –≤—ã –≤—Å–µ –ø–æ—Ç–µ—Ä—è–ª–∏. –ù–æ {creditor_list[players[player]['round_number']-1]} {debt[players[player]['round_number']]} {dollar_word(debt[players[player]['round_number']])}, " \
    f"—á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞–∑–±–æ–≥–∞—Ç–µ—Ç—å. –î–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã –¥–æ–ª–≥ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 100% –∫–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥ –∏ –±—É–¥–µ—Ç –≤—ã—á—Ç–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ 7 —Ä–∞—É–Ω–¥–µ."


#–ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
def risk_profile(id):
    company_list = []
    for round in players[id]["companies"]:
        for company in players[id]["companies"][round]:
            if players[id]["companies"][round][company] > 0:
                company_list.append(company)
    risk = len(company_list)
    if 29 <= risk <= 35:
        return "–í–∞—à —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: –ù–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–π –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤—â–∏–∫, —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ 1 –∏–∑ 5. –í—ã –≤–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ—Å—å –≤–æ –≤—Å–µ –ø–æ–¥—Ä—è–¥, –Ω–µ –≤–Ω–∏–∫–∞—è –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - —ç—Ç–æ, —Ä–∞–∑—É–º–µ–µ—Ç—Å—è, –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, –Ω–æ, –¥–∞–∂–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É—è—Å—å, —Å—Ç–æ–∏—Ç —Å —É–º–æ–º –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π."
    elif 21 <= risk <= 28:
        return "–í–∞—à —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ 2 –∏–∑ 5. –í—ã –º–æ–ª–æ–¥–µ—Ü, —É –≤–∞—Å –æ—á–µ–Ω—å –≥—Ä–∞–º–æ—Ç–Ω—ã–π –∏ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥. –í—ã –Ω–µ –∫–∏–¥–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ, —á—Ç–æ –≤–∞–º –ø—Ä–µ–¥–ª–æ–≥–∞–ª–æ—Å—å, –Ω–æ –∏ –Ω–µ —Å–∫–ª–∞–¥—ã–≤–∞–ª–∏ –≤—Å–µ —è–π—Ü–∞ –≤ –æ–¥–Ω—É –∫–æ—Ä–∑–∏–Ω—É. –í–∞—Å –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏ –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–µ—Ç, –Ω–æ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –≤—ã –∫–æ–º—É —É–≥–æ–¥–Ω–æ –¥–∞–¥–∏—Ç–µ —Ñ–æ—Ä—É."
    elif 17 <= risk <= 20:
        return "–í–∞—à —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: –£–º–µ—Ä–µ–Ω–Ω–æ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π, —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ 3 –∏–∑ 5. –î–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ª—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–∞ —Ä—ã–Ω–∫–µ –∏ —É–¥–µ–ª—è—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–ø–∞–Ω–∏–π. –ï—Å–ª–∏ –≤—ã –∏–∑ —Ç–∞–∫–∏—Ö, —Ç–æ —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–≤–µ—Ç—É–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —á—É—Ç—å –±–æ–ª–µ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å."
    elif 12 <= risk <= 16:
        return "–í–∞—à —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: –û—á–µ–Ω—å —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π, —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ 4 –∏–∑ 5. –õ–∏–±–æ –≤—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä, –∫–æ—Ç–æ—Ä–æ–π –ø–æ 16 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–π –∏ –æ—Ü–µ–Ω–∫—É —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ, –ª–∏–±–æ –≤—ã –ø—Ä–æ—Å—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–∞–º–æ–Ω–∞–¥–µ—è–Ω–Ω—ã –∏ —Å—á–∏—Ç–∞–µ—Ç–µ —Å–µ–±—è —É–º–Ω–µ–µ –¥—Ä—É–≥–∏—Ö. –ï—Å–ª–∏ –≤—ã –∏–∑ –≤—Ç–æ—Ä—ã—Ö, —Ç–æ —Å–∫–æ—Ä–æ —Ä—ã–Ω–æ–∫ –ø—Ä–µ–ø–æ–¥–∞—Å—Ç –≤–∞–º —É—Ä–æ–∫, –Ω–æ –æ–Ω –±—É–¥–µ—Ç –¥–æ—Ä–æ–≥–æ–π."
    else:
        return '–í–∞—à —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: "–°—Ç–∞–ª—å–Ω—ã–µ —è–π—Ü–∞", —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ 5 –∏–∑ 5. –í—ã —è–≤–Ω–æ –ª–∏–±–æ –í–∞–Ω–≥–∞, –ª–∏–±–æ –∏–Ω—Å–∞–π–¥–µ—Ä. –ï—Å–ª–∏ —è —É–≥–∞–¥–∞–ª, —Ç–æ –¥–∞–≤–∞–π—Ç–µ –¥—Ä—É–∂–∏—Ç—å) –ï—Å–ª–∏ –Ω–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ, —Ç–æ —Ä—ã–Ω–æ–∫ –≤–∞—Å –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ –ø—Ä–æ–∂—É–µ—Ç –∏ –≤—ã–ø–ª—é–Ω–µ—Ç. –ù–µ–ª—å–∑—è –≤—Å–µ —è–π—Ü–∞ –∫–ª–∞—Å—Ç—å –≤ –æ–¥–Ω—É –∫–æ—Ä–∑–∏–Ω—É.'


#—Å–æ—Ö—Ä–∞–Ω—è–µ–º players –≤ —Ñ–∞–π–ª
def saving():
    with open("save_players.json", "w") as write_file:
        json.dump(players, write_file)
    return


#–∫–ª–∞–≤–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
def delete_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    for player in players:
        keyboard.add(types.InlineKeyboardButton(text=players[player]["name"],callback_data=player))
    return keyboard


#–∫–ª–∞–≤–∞ –¥–ª—è –∑–∞–ø—Ä–µ—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def keyboard_stop_game():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",callback_data="stop_game"))
    return keyboard


#—Å–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å
def turtle():
    turtle_list = []
    for player in players:
        round_number = players[player]["round_number"]
        break
    for player in players:
        if players[player]["finish"][round_number] == 0:
            turtle_list.append(players[player]["name"])
    return ", ".join(turtle_list)


#–∫–ª–∞–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
def keyboard_start_game():
    keyboard = types.InlineKeyboardMarkup()
    go = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='start_game')
    keyboard.add(go)
    return keyboard


#–∫–ª–∞–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä?
def keyboard_time_go():
    keyboard = types.InlineKeyboardMarkup()
    go = types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç?", callback_data='time_go')
    keyboard.add(go)
    return keyboard


#–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏
def time_alert():
    for player in players:
        round_num = players[player]["round_number"]
        break
    for gamer in players:
        if players[gamer]["finish"][round_num] == 0  and stop_game_flag == 0:
            bot.send_message(gamer, "–û—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞")
    if stop_game_flag == 0:
        bot.send_message(325051402, "–û—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞")


def time_to_stop():
    if stop_game_flag == 0:
        bot.send_message(325051402, "–ì–∞–≤—Ä, –ø–æ—Ä–∞ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", reply_markup= keyboard_stop_game())


@bot.message_handler(commands=["start", "help", "delete", "cleaning", "turtle", "mistake"])  # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–≤–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ /
def command_hadler(message):
    global players
    global stop_game_flag
    if message.text == "/start":
        if message.from_user.id not in players:
            players[message.from_user.id] = {}
            players[message.from_user.id]["money"] = 3
            players[message.from_user.id]["choose"] = 0
            players[message.from_user.id]["debt"] = 0
            players[message.from_user.id]["finish"] = copy.deepcopy(finish)
            players[message.from_user.id]["name"] = 0
            players[message.from_user.id]["companies"] = copy.deepcopy(companies)
            if len(players) == 1:
                players[message.from_user.id]["round_number"] = 1
                bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ö–∞–ø–∏—Ç–∞–ª–∏—Å—Ç"! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –º–Ω–µ.')
                bot.send_message(325051402, "–ì–∞–≤—Ä, –Ω–∞—á–Ω–µ–º –∏–≥—Ä—É?", reply_markup=keyboard_start_game())
            else:
                players[message.from_user.id]["round_number"] = [players[player]["round_number"] for player in players if player != message.from_user.id][0]
                if players[message.from_user.id]["round_number"] == 1:
                    bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ö–∞–ø–∏—Ç–∞–ª–∏—Å—Ç"! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –º–Ω–µ.')
                else:
                    bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø–µ—Ä–≤—ã–µ —Ä–∞—É–Ω–¥—ã, –Ω–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏. –í–∫–ª—é—á–∞–π—Ç–µ—Å—å –≤ –∏–≥—Ä—É!")
                    try:
                        a = max([int(players[player]["name"][9:]) for player in players if players[player]["name"][:9] == "–û–ø–æ–∑–¥y–Ω—ã-"]) + 1
                    except:
                        a = 1
                    players[message.from_user.id]["name"] = ("–û–ø–æ–∑–¥—É–Ω—ã-" + str(a))
                    bot.send_message(325051402, f'–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ - {players[message.from_user.id]["name"]}')
            saving()
        else:
            bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ")
    elif message.text == "/help":
        bot.send_message(message.from_user.id, "/delete - —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n\n/cleaning - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n\n/turtle - —Å–ø–∏—Å–æ–∫ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–≤—à–∏—Ö\n\n/mistake - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
    elif message.text == "/delete":
        bot.send_message(message.from_user.id, "–ö–æ–≥–æ —É–¥–∞–ª–∏–º?", reply_markup=delete_keyboard())
    elif message.text == "/cleaning":
        players = {}
        bot.send_message(325051402, "–í—Å–µ —á–∏—Å—Ç–æ")
        saving()
    elif message.text == "/turtle":
        bot.send_message(325051402, f"–ù–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞—É–Ω–¥: {turtle()}")
    elif message.text == "/mistake":
        stop_game_flag = 0
        bot.send_message(325051402, "–ú–æ–∂–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.")


@bot.callback_query_handler(func=lambda message: True)
def answer(message):
    global players
    global stop_game_flag
    if message.data == 'yes':
        for i in players:
            players[i]["debt"] *= 2
        round_table_str = round_table()
        for player in players:
            if players[player]['round_number'] == 7:
                players[player]["money"] = (money_result(player) - players[player]["debt"])
                money = players[player]["money"]
                bot.send_message(player, f"–ù–µ–∑–∞–º–µ—Ç–Ω–æ –ø—Ä–æ–ª–µ—Ç–µ–ª —Ü–µ–ª—ã–π –≤–µ–∫! –í–∞—à –∫–∞–ø–∏—Ç–∞–ª –ø–æ—Å–ª–µ 105 –ª–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {money} {dollar_word(money)}! {delta(money)}\n\n{max_profitable_company(player)}.\n\n{max_profit_from_company(player)}.\n\n{risk_profile(player)}")
                bot.send_message(player, f"{round_table_str[0]}")
                bot.send_message(player, f"{round_table_str[1]}")
            else:
                if money_result(player) == 0:
                    bot.send_message(player, lose_money(player))
                bot.send_message(player, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã {players[player]['round_number']} —Ä–∞—É–Ω–¥–∞:\n{round_table_str}")
        bot.send_message(325051402, f"{round_table_str[0] if players[player]['round_number'] == 7 else round_table_str}")
        if players[player]['round_number'] < 7:
            bot.send_message(325051402, f"–ì–∞–≤—Ä, –Ω–∞—á–Ω–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥?", reply_markup=keyboard_begin_round())
        saving()
    elif message.data == 'begin':
        stop_game_flag = 0
        for player in players:
            if money_result(player) == 0:
                players[player]["money"] = debt[players[player]['round_number']]
                players[player]["debt"] += debt[players[player]['round_number']]
            else:
                players[player]["money"] = money_result(player)
            players[player]["round_number"] += 1
            bot.send_message(player, f"{beautiful(player)}\n–í –∫–∞–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=keyboard(round_list, player))
        saving()
        bot.send_message(325051402, f"–ì–∞–≤—Ä, –∑–∞–ø—É—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä?", reply_markup=keyboard_time_go())
        bot.send_message(325051402, f"–ì–∞–≤—Ä, –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏?", reply_markup=keyboard_stop_game())
    elif message.data.isdigit() == True:
        if int(message.data) in [player for player in players]:
            leaver = int(message.data)
            bot.send_message(325051402, f"{players[leaver]['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥—Ä—ã")
            players.pop(leaver)
            saving()
        else:
            bot.send_message(325051402, "–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω —Ä–∞–Ω–µ–µ")
    elif message.data == "sure":
        if message.from_user.id in [player for player in players]:
            bot.send_message(message.from_user.id,"–ñ–∞–ª—å, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –Ω–µ –¥–æ–π–¥—è –¥–æ —Ü–µ–ª–∏. –¢–∞–∫ –º–∏–ª–ª–∏–∞—Ä–¥ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å.")
            bot.send_message(325051402, f"{players[message.from_user.id]['name']} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã")
            players.pop(message.from_user.id)
            saving()
        else:
            bot.send_message(message.from_user.id, "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã —á—Ç–æ–±—ã, –Ω–∞–¥–æ–±–Ω–æ –≤–æ–π—Ç–∏ –≤ –Ω–µ–µ –ø—Ä–µ–∂–¥–µ!")
    elif message.data == "notsure":
        bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –ø—Ä–µ—É—Å–ø–µ—Ç—å –Ω–∞ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ, –Ω—É–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–º")
    elif message.data == "start_game":
        for player in players:
            bot.send_message(player, f"{beautiful(player)}\n–í –∫–∞–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=keyboard(round_list, player))
        bot.send_message(325051402, f"–ì–∞–≤—Ä, –∑–∞–ø—É—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä?", reply_markup=keyboard_time_go())
        bot.send_message(325051402, f"–ì–∞–≤—Ä, –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏?", reply_markup=keyboard_stop_game())
    elif message.data == "stop_game":
        stop_game_flag = 1
        bot.send_message(325051402, f"–ì–∞–≤—Ä, —Ä–∞–∑—Ä–µ—à–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", reply_markup=keyboard_result())
    elif message.data == "time_go":
        Timer(120, time_alert).start()
        Timer(180, time_to_stop).start()
    else:
        if stop_game_flag == 0:
            if message.data in round_list(message.from_user.id):
                bot.send_message(message.from_user.id, f"–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ {message.data}?\n–°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Äî {players[message.from_user.id]['money']-sum([i for i in players[message.from_user.id]['companies'][players[message.from_user.id]['round_number']].values()])} {dollar_word(players[message.from_user.id]['money']-sum([i for i in players[message.from_user.id]['companies'][players[message.from_user.id]['round_number']].values()]))}.")
                players[message.from_user.id]["choose"] = message.data
                saving()
            else:
                bot.send_message(message.from_user.id, f'–ö–æ–º–ø–∞–Ω–∏—è "{message.data}" –±–æ–ª–µ–µ –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ –Ω—ã–Ω–µ—à–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞.')
        else:
            bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –≤—ã—à–ª–æ.")


@bot.message_handler(content_types=["text"])
def sticker_hadler(message):
    global players
    if message.from_user.id in players:
        if message.text.isdigit() == False:
            if players[message.from_user.id]["name"] == 0:
                players[message.from_user.id]["name"] = message.text
                bot.send_message(325051402, f'–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ - {players[message.from_user.id]["name"]}')
                bot.send_message(message.from_user.id, f'–ú—ã –¥–æ–∂–¥–µ–º—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–Ω–µ–º.\n–ñ–µ–ª–∞—é —É–¥–∞—á–∏, {players[message.from_user.id]["name"]}!')
            else:
                small_talk(message)
        else:
            if stop_game_flag == 0:
                if players[message.from_user.id]['choose'] in round_list(message.from_user.id):
                    investment = int(message.text)
                    money = players[message.from_user.id]["money"]
                    round_investment = sum([i for i in players[message.from_user.id]["companies"][players[message.from_user.id]["round_number"]].values()])
                    if investment > money - round_investment:
                        bot.send_message(message.from_user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å —Ç–æ–ª—å–∫–æ {money - round_investment} {dollar_word(money - round_investment)}. –°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ {players[message.from_user.id]['choose']}?")
                    else:
                        players[message.from_user.id]["companies"][players[message.from_user.id]["round_number"]][players[message.from_user.id]["choose"]] += investment
                        round_investment = sum([i for i in players[message.from_user.id]["companies"][players[message.from_user.id]["round_number"]].values()])
                        if money == round_investment:
                            players[message.from_user.id]["round_result"] = money_result(message.from_user.id)
                            if players[message.from_user.id]['round_number'] == 1:
                                bot.send_photo(message.from_user.id, photo=putin)
                            bot.send_message(message.from_user.id, f"–°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:\n{already_invested(message.from_user.id)}.\n\n–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ–± —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏.\n\n{yesfraselist[players[message.from_user.id]['round_number'] - 1]}")
                            players[message.from_user.id]["finish"][players[message.from_user.id]["round_number"]] = 1
                            bot.send_message(325051402,f'{players[message.from_user.id]["name"]} –∑–∞–∫–æ–Ω—á–∏–ª {players[message.from_user.id]["round_number"]} —Ä–∞—É–Ω–¥ c {money_result(message.from_user.id)} $')
                            if sum([players[i]["finish"][players[message.from_user.id]["round_number"]] for i in players]) == len(players):
                                bot.send_message(325051402, '–ì–∞–≤—Ä, –≤—Å–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏, —Ä–∞–∑—Ä–µ—à–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', reply_markup=keyboard_result())
                                bot.send_message(325051402, investment_table())
                        else:
                            bot.send_message(message.from_user.id, f"–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å, —É –≤–∞—Å –µ—â–µ {money - round_investment} {dollar_word(money - round_investment)}.\n\n–í—ã —É–∂–µ –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏:\n{already_invested(message.from_user.id)}.\n\n–ß—å–∏ –∞–∫—Ü–∏–∏ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", reply_markup=keyboard(round_list, message.from_user.id))
                    saving()
                else:
                    bot.send_message(message.from_user.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—ã—à–µ. –ò–Ω–∞—á–µ –º—ã —Ä–∞–∑–¥–∞–¥–∏–º –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Å—Ç–∞—Ä—Ç–∞–ø–µ—Ä–∞–º –∏–∑ –°–∫–æ–ª–∫–æ–≤–æ.")
            else:
                bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –≤—ã—à–ª–æ.")
    else:
        bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ —Ä–∞–∑—Ä–µ—à–∞—é—Ç —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏–≥—Ä—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ >>> /start')


@bot.message_handler(content_types=["sticker"])     # –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä
def sticker_hadler(message):
    bot.send_sticker(chat_id=message.from_user.id, data = sticker)


bot.polling(timeout=60)
